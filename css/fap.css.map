{
	"version": 3,
	"file": "fap.css",
	"sources": [
		"fap.sass",
		"_sass/bourbon/_bourbon.scss",
		"_sass/bourbon/helpers/_deprecated-webkit-gradient.scss",
		"_sass/bourbon/helpers/_gradient-positions-parser.scss",
		"_sass/bourbon/helpers/_linear-positions-parser.scss",
		"_sass/bourbon/helpers/_radial-arg-parser.scss",
		"_sass/bourbon/helpers/_radial-positions-parser.scss",
		"_sass/bourbon/helpers/_render-gradients.scss",
		"_sass/bourbon/helpers/_shape-size-stripper.scss",
		"_sass/bourbon/functions/_compact.scss",
		"_sass/bourbon/functions/_flex-grid.scss",
		"_sass/bourbon/functions/_grid-width.scss",
		"_sass/bourbon/functions/_linear-gradient.scss",
		"_sass/bourbon/functions/_modular-scale.scss",
		"_sass/bourbon/functions/_px-to-em.scss",
		"_sass/bourbon/functions/_radial-gradient.scss",
		"_sass/bourbon/functions/_tint-shade.scss",
		"_sass/bourbon/functions/_transition-property-name.scss",
		"_sass/bourbon/css3/_animation.scss",
		"_sass/bourbon/css3/_appearance.scss",
		"_sass/bourbon/css3/_backface-visibility.scss",
		"_sass/bourbon/css3/_background.scss",
		"_sass/bourbon/css3/_background-image.scss",
		"_sass/bourbon/css3/_border-image.scss",
		"_sass/bourbon/css3/_border-radius.scss",
		"_sass/bourbon/css3/_box-sizing.scss",
		"_sass/bourbon/css3/_columns.scss",
		"_sass/bourbon/css3/_flex-box.scss",
		"_sass/bourbon/css3/_font-face.scss",
		"_sass/bourbon/css3/_hidpi-media-query.scss",
		"_sass/bourbon/css3/_image-rendering.scss",
		"_sass/bourbon/css3/_inline-block.scss",
		"_sass/bourbon/css3/_keyframes.scss",
		"_sass/bourbon/css3/_linear-gradient.scss",
		"_sass/bourbon/css3/_perspective.scss",
		"_sass/bourbon/css3/_radial-gradient.scss",
		"_sass/bourbon/css3/_transform.scss",
		"_sass/bourbon/css3/_transition.scss",
		"_sass/bourbon/css3/_user-select.scss",
		"_sass/bourbon/css3/_placeholder.scss",
		"_sass/bourbon/addons/_button.scss",
		"_sass/bourbon/addons/_clearfix.scss",
		"_sass/bourbon/addons/_font-family.scss",
		"_sass/bourbon/addons/_hide-text.scss",
		"_sass/bourbon/addons/_html5-input-types.scss",
		"_sass/bourbon/addons/_position.scss",
		"_sass/bourbon/addons/_prefixer.scss",
		"_sass/bourbon/addons/_retina-image.scss",
		"_sass/bourbon/addons/_size.scss",
		"_sass/bourbon/addons/_timing-functions.scss",
		"_sass/bourbon/addons/_triangle.scss",
		"_sass/bourbon/_bourbon-deprecated-upcoming.scss",
		"_sass/neat/_neat.scss",
		"_sass/neat/_neat-helpers.scss",
		"_sass/neat/functions/_private.scss",
		"_sass/neat/functions/_new-breakpoint.scss",
		"_sass/neat/settings/_grid.scss",
		"_sass/neat/settings/_visual-grid.scss",
		"_sass/neat/grid/_private.scss",
		"_sass/neat/grid/_reset.scss",
		"_sass/neat/grid/_grid.scss",
		"_sass/neat/grid/_omega.scss",
		"_sass/neat/grid/_outer-container.scss",
		"_sass/neat/grid/_span-columns.scss",
		"_sass/neat/grid/_row.scss",
		"_sass/neat/grid/_shift.scss",
		"_sass/neat/grid/_pad.scss",
		"_sass/neat/grid/_fill-parent.scss",
		"_sass/neat/grid/_media.scss",
		"_sass/neat/grid/_to-deprecate.scss",
		"_sass/neat/grid/_visual-grid.scss",
		"_sass/_sass/colors.sass",
		"_sass/_sass/layout.sass",
		"_sass/_sass/typography.sass",
		"_sass/_sass/header.sass",
		"_sass/_sass/homepage.sass",
		"_sass/_sass/about.sass",
		"_sass/_sass/posts.sass",
		"_sass/_sass/author.sass",
		"_sass/_sass/footer.sass",
		"_sass/_sass/fun.sass",
		"_sass/_sass/responsive.sass",
		"_sass/syntax.sass"
	],
	"sourcesContent": [
		"@import \"bourbon/bourbon\";\n@import \"neat/neat\";\n@import \"_sass/colors\";\n@import \"_sass/layout\";\n@import \"_sass/typography\";\n@import \"_sass/header\";\n@import \"_sass/homepage\";\n@import \"_sass/about\";\n@import \"_sass/posts\";\n@import \"_sass/author\";\n@import \"_sass/footer\";\n@import \"_sass/fun\";\n@import \"_sass/responsive\";\n@import \"syntax\";\n",
		"// Custom Helpers\n@import \"helpers/deprecated-webkit-gradient\";\n@import \"helpers/gradient-positions-parser\";\n@import \"helpers/linear-positions-parser\";\n@import \"helpers/radial-arg-parser\";\n@import \"helpers/radial-positions-parser\";\n@import \"helpers/render-gradients\";\n@import \"helpers/shape-size-stripper\";\n\n// Custom Functions\n@import \"functions/compact\";\n@import \"functions/flex-grid\";\n@import \"functions/grid-width\";\n@import \"functions/linear-gradient\";\n@import \"functions/modular-scale\";\n@import \"functions/px-to-em\";\n@import \"functions/radial-gradient\";\n@import \"functions/tint-shade\";\n@import \"functions/transition-property-name\";\n\n// CSS3 Mixins\n@import \"css3/animation\";\n@import \"css3/appearance\";\n@import \"css3/backface-visibility\";\n@import \"css3/background\";\n@import \"css3/background-image\";\n@import \"css3/border-image\";\n@import \"css3/border-radius\";\n@import \"css3/box-sizing\";\n@import \"css3/columns\";\n@import \"css3/flex-box\";\n@import \"css3/font-face\";\n@import \"css3/hidpi-media-query\";\n@import \"css3/image-rendering\";\n@import \"css3/inline-block\";\n@import \"css3/keyframes\";\n@import \"css3/linear-gradient\";\n@import \"css3/perspective\";\n@import \"css3/radial-gradient\";\n@import \"css3/transform\";\n@import \"css3/transition\";\n@import \"css3/user-select\";\n@import \"css3/placeholder\";\n\n// Addons & other mixins\n@import \"addons/button\";\n@import \"addons/clearfix\";\n@import \"addons/font-family\";\n@import \"addons/hide-text\";\n@import \"addons/html5-input-types\";\n@import \"addons/position\";\n@import \"addons/prefixer\";\n@import \"addons/retina-image\";\n@import \"addons/size\";\n@import \"addons/timing-functions\";\n@import \"addons/triangle\";\n\n// Soon to be deprecated Mixins\n@import \"bourbon-deprecated-upcoming\";\n",
		"// Render Deprecated Webkit Gradient - Linear || Radial\n//************************************************************************//\n@function _deprecated-webkit-gradient($type,\n                                     $deprecated-pos1, $deprecated-pos2,\n                                     $full,\n                                     $deprecated-radius1: false, $deprecated-radius2: false) {\n  $gradient-list: ();\n  $gradient: false;\n  $full-length: length($full);\n  $percentage: false;\n  $gradient-type: $type;\n\n  @for $i from 1 through $full-length {\n    $gradient: nth($full, $i);\n\n    @if length($gradient) == 2 {\n      $color-stop: color-stop(nth($gradient, 2), nth($gradient, 1));\n      $gradient-list: join($gradient-list, $color-stop, comma);\n    }\n    @else if $gradient != null {\n      @if $i == $full-length {\n        $percentage: 100%;\n      }\n      @else {\n        $percentage: ($i - 1) * (100 / ($full-length - 1)) + \"%\";\n      }\n      $color-stop: color-stop(unquote($percentage), $gradient);\n      $gradient-list: join($gradient-list, $color-stop, comma);\n    }\n  }\n\n  @if $type == radial {\n    $gradient: -webkit-gradient(radial, $deprecated-pos1, $deprecated-radius1, $deprecated-pos2, $deprecated-radius2, $gradient-list);\n  }\n  @else if $type == linear {\n    $gradient: -webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $gradient-list);\n  }\n  @return $gradient;\n}\n",
		"@function _gradient-positions-parser($gradient-type, $gradient-positions) {\n  @if $gradient-positions\n  and ($gradient-type == linear)\n  and (type-of($gradient-positions) != color) {\n    $gradient-positions: _linear-positions-parser($gradient-positions);\n  }\n  @else if $gradient-positions\n  and ($gradient-type == radial)\n  and (type-of($gradient-positions) != color) {\n    $gradient-positions: _radial-positions-parser($gradient-positions);\n  }\n  @return $gradient-positions;\n}\n",
		"@function _linear-positions-parser($pos) {\n  $type: type-of(nth($pos, 1));\n  $spec: null;\n  $degree: null;\n  $side: null;\n  $corner: null;\n  $length: length($pos);\n  // Parse Side and corner positions\n  @if ($length > 1) {\n    @if nth($pos, 1) == \"to\" { // Newer syntax\n      $side: nth($pos, 2);\n\n      @if $length == 2 { // eg. to top\n        // Swap for backwards compatability\n        $degree: _position-flipper(nth($pos, 2));\n      }\n      @else if $length == 3 { // eg. to top left\n        $corner: nth($pos, 3);\n      }\n    }\n    @else if $length == 2 { // Older syntax (\"top left\")\n      $side: _position-flipper(nth($pos, 1));\n      $corner: _position-flipper(nth($pos, 2));\n    }\n\n    @if (\"#{$side} #{$corner}\" == \"left top\") or (\"#{$side} #{$corner}\" == \"top left\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"right top\") or (\"#{$side} #{$corner}\" == \"top right\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"right bottom\") or (\"#{$side} #{$corner}\" == \"bottom right\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    @else if (\"#{$side} #{$corner}\" == \"left bottom\") or (\"#{$side} #{$corner}\" == \"bottom left\") {\n      $degree: _position-flipper(#{$side}) _position-flipper(#{$corner});\n    }\n    $spec: to $side $corner;\n  }\n  @else if $length == 1 {\n    // Swap for backwards compatability\n    @if $type == string {\n      $degree: $pos;\n      $spec: to _position-flipper($pos);\n    }\n    @else {\n      $degree: -270 - $pos; //rotate the gradient opposite from spec\n      $spec: $pos;\n    }\n  }\n  $degree: unquote($degree + \",\");\n  $spec:   unquote($spec + \",\");\n  @return $degree $spec;\n}\n\n@function _position-flipper($pos) {\n @return if($pos == left, right, null)\n         if($pos == right, left, null)\n         if($pos == top, bottom, null)\n         if($pos == bottom, top, null);\n}\n",
		"@function _radial-arg-parser($G1, $G2, $pos, $shape-size) {\n  @each $value in $G1, $G2 {\n    $first-val: nth($value, 1);\n    $pos-type:  type-of($first-val);\n    $spec-at-index: null;\n\n    // Determine if spec was passed to mixin\n    @if type-of($value) == list {\n      $spec-at-index: if(index($value, at), index($value, at), false);\n    }\n    @if $spec-at-index {\n      @if $spec-at-index > 1 {\n        @for $i from 1 through ($spec-at-index - 1) {\n          $shape-size: $shape-size nth($value, $i);\n        }\n        @for $i from ($spec-at-index + 1) through length($value) {\n          $pos: $pos nth($value, $i);\n        }\n      }\n      @else if $spec-at-index == 1 {\n        @for $i from ($spec-at-index + 1) through length($value) {\n          $pos: $pos nth($value, $i);\n        }\n      }\n      $G1: false;\n    }\n\n    // If not spec calculate correct values\n    @else {\n      @if ($pos-type != color) or ($first-val != \"transparent\") {\n        @if ($pos-type == number)\n        or ($first-val == \"center\")\n        or ($first-val == \"top\")\n        or ($first-val == \"right\")\n        or ($first-val == \"bottom\")\n        or ($first-val == \"left\") {\n\n          $pos: $value;\n\n          @if $pos == $G1 {\n            $G1: false;\n          }\n        }\n\n        @else if\n           ($first-val == \"ellipse\")\n        or ($first-val == \"circle\")\n        or ($first-val == \"closest-side\")\n        or ($first-val == \"closest-corner\")\n        or ($first-val == \"farthest-side\")\n        or ($first-val == \"farthest-corner\")\n        or ($first-val == \"contain\")\n        or ($first-val == \"cover\") {\n\n          $shape-size: $value;\n\n          @if $value == $G1 {\n            $G1: false;\n          }\n\n          @else if $value == $G2 {\n            $G2: false;\n          }\n        }\n      }\n    }\n  }\n  @return $G1, $G2, $pos, $shape-size;\n}\n",
		"@function _radial-positions-parser($gradient-pos) {\n  $shape-size: nth($gradient-pos, 1);\n  $pos:        nth($gradient-pos, 2);\n  $shape-size-spec: _shape-size-stripper($shape-size);\n\n  $pre-spec: unquote(if($pos, \"#{$pos}, \", null))\n             unquote(if($shape-size, \"#{$shape-size},\", null));\n  $pos-spec: if($pos, \"at #{$pos}\", null);\n\n  $spec: \"#{$shape-size-spec} #{$pos-spec}\";\n\n  // Add comma\n  @if ($spec != '  ') {\n    $spec: \"#{$spec},\"\n  }\n\n  @return $pre-spec $spec;\n}\n",
		"// User for linear and radial gradients within background-image or border-image properties\n\n@function _render-gradients($gradient-positions, $gradients, $gradient-type, $vendor: false) {\n  $pre-spec: null;\n  $spec: null;\n  $vendor-gradients: null;\n  @if $gradient-type == linear {\n    @if $gradient-positions {\n      $pre-spec: nth($gradient-positions, 1);\n      $spec:     nth($gradient-positions, 2);\n    }\n  }\n  @else if $gradient-type == radial {\n    $pre-spec: nth($gradient-positions, 1);\n    $spec:     nth($gradient-positions, 2);\n  }\n\n  @if $vendor {\n    $vendor-gradients: -#{$vendor}-#{$gradient-type}-gradient(#{$pre-spec} $gradients);\n  }\n  @else if $vendor == false {\n    $vendor-gradients: \"#{$gradient-type}-gradient(#{$spec} #{$gradients})\";\n    $vendor-gradients: unquote($vendor-gradients);\n  }\n  @return $vendor-gradients;\n}\n",
		"@function _shape-size-stripper($shape-size) {\n  $shape-size-spec: null;\n  @each $value in $shape-size {\n    @if ($value == \"cover\") or ($value == \"contain\") {\n      $value: null;\n    }\n    $shape-size-spec: \"#{$shape-size-spec} #{$value}\";\n  }\n  @return $shape-size-spec;\n}\n",
		"// Remove `false` values from a list\n\n@function compact($vars...) {\n  $list: ();\n  @each $var in $vars {\n    @if $var {\n      $list: append($list, $var, comma);\n    }\n  }\n  @return $list;\n}\n",
		"// Flexible grid\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n// Flexible gutter\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n// The $fg-column, $fg-gutter and $fg-max-columns variables must be defined in your base stylesheet to properly use the flex-grid function.\n// This function takes the fluid grid equation (target / context = result) and uses columns to help define each.\n//\n// The calculation presumes that your column structure will be missing the last gutter:\n//\n//   -- column -- gutter -- column -- gutter -- column\n//\n//  $fg-column: 60px;             // Column Width\n//  $fg-gutter: 25px;             // Gutter Width\n//  $fg-max-columns: 12;          // Total Columns For Main Container\n//\n//  div {\n//    width: flex-grid(4);        // returns (315px / 995px) = 31.65829%;\n//    margin-left: flex-gutter(); // returns (25px / 995px) = 2.51256%;\n//\n//    p {\n//      width: flex-grid(2, 4);  // returns (145px / 315px) = 46.031746%;\n//      float: left;\n//      margin: flex-gutter(4);  // returns (25px / 315px) = 7.936508%;\n//    }\n//\n//    blockquote {\n//      float: left;\n//      width: flex-grid(2, 4); // returns (145px / 315px) = 46.031746%;\n//    }\n//  }",
		"@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n// The $gw-column and $gw-gutter variables must be defined in your base stylesheet to properly use the grid-width function.\n//\n//  $gw-column: 100px;         // Column Width\n//  $gw-gutter: 40px;          // Gutter Width\n//\n//  div {\n//    width: grid-width(4);    // returns 520px;\n//    margin-left: $gw-gutter; // returns 40px;\n//  }\n",
		"@function linear-gradient($pos, $gradients...) {\n  $type: linear;\n  $pos-type: type-of(nth($pos, 1));\n\n  // if $pos doesn't exist, fix $gradient\n  @if ($pos-type == color) or (nth($pos, 1) == \"transparent\")  {\n    $gradients: zip($pos $gradients);\n    $pos: false;\n  }\n\n  $type-gradient: $type, $pos, $gradients;\n  @return $type-gradient;\n}\n",
		"@function modular-scale($value, $increment, $ratio) {\n  @if $increment > 0 {\n    @for $i from 1 through $increment {\n      $value: ($value * $ratio);\n    }\n  }\n\n  @if $increment < 0 {\n    $increment: abs($increment);\n    @for $i from 1 through $increment {\n      $value: ($value / $ratio);\n    }\n  }\n\n  @return $value;\n}\n\n//  div {\n//                     Increment Up GR with positive value\n//   font-size:        modular-scale(14px,   1, 1.618); // returns: 22.652px\n//\n//                     Increment Down GR with negative value\n//   font-size:        modular-scale(14px,  -1, 1.618); // returns: 8.653px\n//\n//                     Can be used with ceil(round up) or floor(round down)\n//   font-size: floor( modular-scale(14px, 1, 1.618) ); // returns: 22px\n//   font-size:  ceil( modular-scale(14px, 1, 1.618) ); // returns: 23px\n//  }\n//\n// modularscale.com\n\n@function golden-ratio($value, $increment) {\n  @return modular-scale($value, $increment, 1.618)\n}\n\n//  div {\n//    font-size: golden-ratio(14px, 1); // returns: 22.652px\n//  }\n//\n// goldenratiocalculator.com\n",
		"// Convert pixels to ems\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n\n@function em($pxval, $base: 16) {\n  @return ($pxval / $base) * 1em;\n}\n\n",
		"// This function is required and used by the background-image mixin.\n@function radial-gradient($G1,        $G2,\n                       $G3: false, $G4: false,\n                       $G5: false, $G6: false,\n                       $G7: false, $G8: false,\n                       $G9: false, $G10: false,\n                       $pos: null,\n                       $shape-size: null) {\n\n  $data: _radial-arg-parser($G1, $G2, $pos, $shape-size);\n  $G1:  nth($data, 1);\n  $G2:  nth($data, 2);\n  $pos: nth($data, 3);\n  $shape-size: nth($data, 4);\n\n  $type: radial;\n  $gradient: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);\n\n  $type-gradient: $type, $shape-size $pos, $gradient;\n  @return $type-gradient;\n}\n\n\n",
		"// Add percentage of white to a color\n@function tint($color, $percent){\n  @return mix(white, $color, $percent);\n}\n\n// Add percentage of black to a color\n@function shade($color, $percent){\n  @return mix(black, $color, $percent);\n}\n",
		"// Return vendor-prefixed property names if appropriate\n// Example: transition-property-names((transform, color, background), moz) -> -moz-transform, color, background\n//************************************************************************//\n@function transition-property-names($props, $vendor: false) {\n\t$new-props: ();\n\t\n\t@each $prop in $props {\n\t\t$new-props: append($new-props, transition-property-name($prop, $vendor), comma);\n\t}\n\n\t@return $new-props;\n}\n\n@function transition-property-name($prop, $vendor: false) {\n\t// put other properties that need to be prefixed here aswell\n\t@if $vendor and $prop == transform {\n\t\t@return unquote('-'+$vendor+'-'+$prop);\n\t}\n\t@else {\n\t\t@return $prop;\n\t}\n}",
		"// http://www.w3.org/TR/css3-animations/#the-animation-name-property-\n// Each of these mixins support comma separated lists of values, which allows different transitions for individual properties to be described in a single style rule. Each value in the list corresponds to the value at that same position in the other properties.\n\n// Official animation shorthand property.\n@mixin animation ($animations...) {\n  @include prefixer(animation, $animations, webkit moz spec);\n}\n\n// Individual Animation Properties\n@mixin animation-name ($names...) {\n  @include prefixer(animation-name, $names, webkit moz spec);\n}\n\n\n@mixin animation-duration ($times...) {\n  @include prefixer(animation-duration, $times, webkit moz spec);\n}\n\n\n@mixin animation-timing-function ($motions...) {\n// ease | linear | ease-in | ease-out | ease-in-out\n  @include prefixer(animation-timing-function, $motions, webkit moz spec);\n}\n\n\n@mixin animation-iteration-count ($values...) {\n// infinite | <number>\n  @include prefixer(animation-iteration-count, $values, webkit moz spec);\n}\n\n\n@mixin animation-direction ($directions...) {\n// normal | alternate\n  @include prefixer(animation-direction, $directions, webkit moz spec);\n}\n\n\n@mixin animation-play-state ($states...) {\n// running | paused\n  @include prefixer(animation-play-state, $states, webkit moz spec);\n}\n\n\n@mixin animation-delay ($times...) {\n  @include prefixer(animation-delay, $times, webkit moz spec);\n}\n\n\n@mixin animation-fill-mode ($modes...) {\n// none | forwards | backwards | both\n  @include prefixer(animation-fill-mode, $modes, webkit moz spec);\n}\n",
		"@mixin appearance ($value) {\n  @include prefixer(appearance, $value, webkit moz ms o spec);\n}\n",
		"//************************************************************************//\n// Backface-visibility mixin\n//************************************************************************//\n@mixin backface-visibility($visibility) {\n  @include prefixer(backface-visibility, $visibility, webkit spec);\n}\n",
		"//************************************************************************//\n// Background property for adding multiple backgrounds using shorthand\n// notation.\n//************************************************************************//\n\n@mixin background(\n  $background-1       , $background-2: false,\n  $background-3: false, $background-4: false,\n  $background-5: false, $background-6: false,\n  $background-7: false, $background-8: false,\n  $background-9: false, $background-10: false,\n  $fallback: false\n) {\n  $backgrounds: compact($background-1, $background-2,\n                $background-3, $background-4,\n                $background-5, $background-6,\n                $background-7, $background-8,\n                $background-9, $background-10);\n\n  $fallback-color: false;\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n  @else {\n    $fallback-color: _extract-background-color($backgrounds);\n  }\n\n  @if $fallback-color {\n    background-color: $fallback-color;\n  }\n  background: _background-add-prefix($backgrounds, webkit);\n  background: _background-add-prefix($backgrounds);\n}\n\n@function _extract-background-color($backgrounds) {\n  $final-bg-layer: nth($backgrounds, length($backgrounds));\n  @if type-of($final-bg-layer) == list {\n    @for $i from 1 through length($final-bg-layer) {\n      $value: nth($final-bg-layer, $i);\n      @if type-of($value) == color {\n        @return $value;\n      }\n    }\n  }\n  @return false;\n}\n\n@function _background-add-prefix($backgrounds, $vendor: false) {\n  $backgrounds-prefixed: ();\n\n  @for $i from 1 through length($backgrounds) {\n    $shorthand: nth($backgrounds, $i); // Get member for current index\n    $type: type-of($shorthand); // Get type of variable - List (gradient) or String (image)\n\n    // If shorthand is a list (gradient)\n    @if $type == list {\n      $first-member: nth($shorthand, 1); // Get first member of shorthand\n\n      // Linear Gradient\n      @if index(linear radial, nth($first-member, 1)) {\n        $gradient-type: nth($first-member, 1); // linear || radial\n        $gradient-args:      false;\n        $gradient-positions: false;\n        $shorthand-start:    false;\n        @if type-of($first-member) == list { // Linear gradient plus additional shorthand values - lg(red,orange)repeat,...\n          $gradient-positions: nth($first-member, 2);\n          $gradient-args:      nth($first-member, 3);\n          $shorthand-start: 2;\n        }\n        @else { // Linear gradient only - lg(red,orange),...\n          $gradient-positions: nth($shorthand, 2);\n          $gradient-args:      nth($shorthand, 3); // Get gradient (red, blue)\n        }\n\n        $gradient-positions: _gradient-positions-parser($gradient-type, $gradient-positions);\n        $gradient: _render-gradients($gradient-positions, $gradient-args, $gradient-type, $vendor);\n\n        // Append any additional shorthand args to gradient\n        @if $shorthand-start {\n          @for $j from $shorthand-start through length($shorthand) {\n            $gradient: join($gradient, nth($shorthand, $j), space);\n          }\n        }\n        $backgrounds-prefixed: append($backgrounds-prefixed, $gradient, comma);\n      }\n      // Image with additional properties\n      @else {\n        $backgrounds-prefixed: append($backgrounds-prefixed, $shorthand, comma);\n      }\n    }\n    // If shorthand is a simple string (color or image)\n    @else if $type == string {\n      $backgrounds-prefixed: join($backgrounds-prefixed, $shorthand, comma);\n    }\n  }\n  @return $backgrounds-prefixed;\n}\n\n//Examples:\n  //@include background(linear-gradient(top, orange, red));\n  //@include background(radial-gradient(circle at 40% 40%, orange, red));\n  //@include background(url(\"/images/a.png\") no-repeat, linear-gradient(orange, red));\n  //@include background(url(\"image.png\") center center, linear-gradient(orange, red), url(\"image.png\"));\n",
		"//************************************************************************//\n// Background-image property for adding multiple background images with\n// gradients, or for stringing multiple gradients together.\n//************************************************************************//\n\n@mixin background-image($images...) {\n  background-image: _add-prefix($images, webkit);\n  background-image: _add-prefix($images);\n}\n\n@function _add-prefix($images, $vendor: false) {\n  $images-prefixed: ();\n  $gradient-positions: false;\n  @for $i from 1 through length($images) {\n    $type: type-of(nth($images, $i)); // Get type of variable - List or String\n\n    // If variable is a list - Gradient\n    @if $type == list {\n      $gradient-type: nth(nth($images, $i), 1); // linear or radial\n      $gradient-pos: null;\n      $gradient-args: null;\n\n      @if ($gradient-type == linear) or ($gradient-type == radial) {\n        $gradient-pos:  nth(nth($images, $i), 2); // Get gradient position\n        $gradient-args: nth(nth($images, $i), 3); // Get actual gradient (red, blue)\n      }\n      @else {\n        $gradient-args: nth(nth($images, $i), 2); // Get actual gradient (red, blue)\n      }\n\n      $gradient-positions: _gradient-positions-parser($gradient-type, $gradient-pos);\n      $gradient: _render-gradients($gradient-positions, $gradient-args, $gradient-type, $vendor);\n      $images-prefixed: append($images-prefixed, $gradient, comma);\n    }\n    // If variable is a string - Image\n    @else if $type == string {\n      $images-prefixed: join($images-prefixed, nth($images, $i), comma);\n    }\n  }\n  @return $images-prefixed;\n}\n\n//Examples:\n  //@include background-image(linear-gradient(top, orange, red));\n  //@include background-image(radial-gradient(50% 50%, cover circle, orange, red));\n  //@include background-image(url(\"/images/a.png\"), linear-gradient(orange, red));\n  //@include background-image(url(\"image.png\"), linear-gradient(orange, red), url(\"image.png\"));\n  //@include background-image(linear-gradient(hsla(0, 100%, 100%, 0.25) 0%, hsla(0, 100%, 100%, 0.08) 50%, transparent 50%), linear-gradient(orange, red));\n",
		"@mixin border-image($images) {\n  -webkit-border-image: _border-add-prefix($images, webkit);\n     -moz-border-image: _border-add-prefix($images, moz);\n       -o-border-image: _border-add-prefix($images, o);\n          border-image: _border-add-prefix($images);\n}\n\n@function _border-add-prefix($images, $vendor: false) {\n  $border-image: null;\n  $images-type:  type-of(nth($images, 1));\n  $first-var:    nth(nth($images, 1), 1);          // Get type of Gradient (Linear || radial)\n\n  // If input is a gradient\n  @if $images-type == string {\n    @if ($first-var == \"linear\") or ($first-var == \"radial\") {\n      $gradient-type: nth($images, 1);           // Get type of gradient (linear || radial)\n      $gradient-pos:  nth($images, 2);           // Get gradient position\n      $gradient-args: nth($images, 3);           // Get actual gradient (red, blue)\n      $gradient-positions: _gradient-positions-parser($gradient-type, $gradient-pos);\n      $border-image:  _render-gradients($gradient-positions, $gradient-args, $gradient-type, $vendor);\n    }\n    // If input is a URL\n    @else {\n      $border-image: $images;\n    }\n  }\n  // If input is gradient or url + additional args\n  @else if $images-type == list {\n    $type: type-of(nth($images, 1));           // Get type of variable - List or String\n\n    // If variable is a list - Gradient\n    @if $type == list {\n      $gradient: nth($images, 1);\n      $gradient-type: nth($gradient, 1);           // Get type of gradient (linear || radial)\n      $gradient-pos:  nth($gradient, 2);           // Get gradient position\n      $gradient-args: nth($gradient, 3);           // Get actual gradient (red, blue)\n      $gradient-positions: _gradient-positions-parser($gradient-type, $gradient-pos);\n      $border-image:  _render-gradients($gradient-positions, $gradient-args, $gradient-type, $vendor);\n\n      @for $i from 2 through length($images) {\n        $border-image: append($border-image, nth($images, $i));\n      }\n    }\n  }\n  @return $border-image;\n}\n\n//Examples:\n// @include border-image(url(\"image.png\"));\n// @include border-image(url(\"image.png\") 20 stretch);\n// @include border-image(linear-gradient(45deg, orange, yellow));\n// @include border-image(linear-gradient(45deg, orange, yellow) stretch);\n// @include border-image(linear-gradient(45deg, orange, yellow) 20 30 40 50 stretch round);\n// @include border-image(radial-gradient(top, cover, orange, yellow, orange));\n\n",
		"//************************************************************************//\n// Shorthand Border-radius mixins\n//************************************************************************//\n@mixin border-top-radius($radii) {\n  @include prefixer(border-top-left-radius, $radii, spec);\n  @include prefixer(border-top-right-radius, $radii, spec);\n}\n\n@mixin border-bottom-radius($radii) {\n  @include prefixer(border-bottom-left-radius, $radii, spec);\n  @include prefixer(border-bottom-right-radius, $radii, spec);\n}\n\n@mixin border-left-radius($radii) {\n  @include prefixer(border-top-left-radius, $radii, spec);\n  @include prefixer(border-bottom-left-radius, $radii, spec);\n}\n\n@mixin border-right-radius($radii) {\n  @include prefixer(border-top-right-radius, $radii, spec);\n  @include prefixer(border-bottom-right-radius, $radii, spec);\n}\n",
		"@mixin box-sizing ($box) {\n//  content-box | border-box | inherit\n  @include prefixer(box-sizing, $box, webkit moz spec);\n}\n",
		"@mixin columns($arg: auto) {\n// <column-count> || <column-width>\n  @include prefixer(columns, $arg, webkit moz spec);\n}\n\n@mixin column-count($int: auto) {\n// auto || integer\n  @include prefixer(column-count, $int, webkit moz spec);\n}\n\n@mixin column-gap($length: normal) {\n// normal || length\n  @include prefixer(column-gap, $length, webkit moz spec);\n}\n\n@mixin column-fill($arg: auto) {\n// auto || length\n  @include prefixer(columns-fill, $arg, webkit moz spec);\n}\n\n@mixin column-rule($arg) {\n// <border-width> || <border-style> || <color>\n  @include prefixer(column-rule, $arg, webkit moz spec);\n}\n\n@mixin column-rule-color($color) {\n  @include prefixer(column-rule-color, $color, webkit moz spec);\n}\n\n@mixin column-rule-style($style: none) {\n// none | hidden | dashed | dotted | double | groove | inset | inset | outset | ridge | solid\n  @include prefixer(column-rule-style, $style, webkit moz spec);\n}\n\n@mixin column-rule-width ($width: none) {\n  @include prefixer(column-rule-width, $width, webkit moz spec);\n}\n\n@mixin column-span($arg: none) {\n// none || all\n  @include prefixer(column-span, $arg, webkit moz spec);\n}\n\n@mixin column-width($length: auto) {\n// auto || length\n  @include prefixer(column-width, $length, webkit moz spec);\n}\n",
		"// CSS3 Flexible Box Model and property defaults\n\n// Custom shorthand notation for flexbox\n@mixin box($orient: inline-axis, $pack: start, $align: stretch) {\n  @include display-box;\n  @include box-orient($orient);\n  @include box-pack($pack);\n  @include box-align($align);\n}\n\n@mixin display-box {\n  display: -webkit-box;\n  display: -moz-box;\n  display: box;\n}\n\n@mixin box-orient($orient: inline-axis) {\n// horizontal|vertical|inline-axis|block-axis|inherit\n  @include prefixer(box-orient, $orient, webkit moz spec);\n}\n\n@mixin box-pack($pack: start) {\n// start|end|center|justify\n  @include prefixer(box-pack, $pack, webkit moz spec);\n}\n\n@mixin box-align($align: stretch) {\n// start|end|center|baseline|stretch\n  @include prefixer(box-align, $align, webkit moz spec);\n}\n\n@mixin box-direction($direction: normal) {\n// normal|reverse|inherit\n  @include prefixer(box-direction, $direction, webkit moz spec);\n}\n\n@mixin box-lines($lines: single) {\n// single|multiple\n  @include prefixer(box-lines, $lines, webkit moz spec);\n}\n\n@mixin box-ordinal-group($int: 1) {\n  @include prefixer(box-ordinal-group, $int, webkit moz spec);\n}\n\n@mixin box-flex($value: 0.0) {\n  @include prefixer(box-flex, $value, webkit moz spec);\n}\n\n@mixin box-flex-group($int: 1) {\n  @include prefixer(box-flex-group, $int, webkit moz spec);\n}\n",
		"// Order of the includes matters, and it is: normal, bold, italic, bold+italic.\n\n@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {\n  @font-face {\n    font-family: $font-family;\n    font-weight: $weight;\n    font-style: $style;\n\n    @if $asset-pipeline == true {\n      src: font-url('#{$file-path}.eot');\n      src: font-url('#{$file-path}.eot?#iefix')          format('embedded-opentype'),\n           font-url('#{$file-path}.woff')                format('woff'),\n           font-url('#{$file-path}.ttf')                 format('truetype'),\n           font-url('#{$file-path}.svg##{$font-family}') format('svg');\n    } @else {\n      src: url('#{$file-path}.eot');\n      src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),\n           url('#{$file-path}.woff')                     format('woff'),\n           url('#{$file-path}.ttf')                      format('truetype'),\n           url('#{$file-path}.svg##{$font-family}')      format('svg');\n    }\n  }\n}\n",
		"// HiDPI mixin. Default value set to 1.3 to target Google Nexus 7 (http://bjango.com/articles/min-device-pixel-ratio/)\n@mixin hidpi($ratio: 1.3) {\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\n  only screen and (min--moz-device-pixel-ratio: $ratio),\n  only screen and (-o-min-device-pixel-ratio: #{$ratio}/1),\n  only screen and (min-resolution: #{round($ratio*96)}dpi),\n  only screen and (min-resolution: #{$ratio}dppx) {\n    @content;\n  }\n}\n",
		"@mixin image-rendering ($mode:optimizeQuality) {\n\n  @if ($mode == optimize-contrast) {\n      image-rendering: -moz-crisp-edges;\n      image-rendering: -o-crisp-edges;\n      image-rendering: -webkit-optimize-contrast;\n      image-rendering: optimize-contrast;\n  }\n\n  @else {\n      image-rendering: $mode;\n  }\n}\n",
		"// Legacy support for inline-block in IE7 (maybe IE6)\n@mixin inline-block {\n  display: inline-block;\n  vertical-align: baseline;\n  zoom: 1;\n  *display: inline;\n  *vertical-align: auto;\n}\n",
		"// Adds keyframes blocks for supported prefixes, removing redundant prefixes in the block's content\n@mixin keyframes($name) {\n  $original-prefix-for-webkit:    $prefix-for-webkit;\n  $original-prefix-for-mozilla:   $prefix-for-mozilla;\n  $original-prefix-for-microsoft: $prefix-for-microsoft;\n  $original-prefix-for-opera:     $prefix-for-opera;\n  $original-prefix-for-spec:      $prefix-for-spec;\n\n  @if $original-prefix-for-webkit {\n    @include disable-prefix-for-all();\n    $prefix-for-webkit: true;\n    @-webkit-keyframes #{$name} {\n      @content;\n    }\n  }\n  @if $original-prefix-for-mozilla {\n    @include disable-prefix-for-all();\n    $prefix-for-mozilla: true;\n    @-moz-keyframes #{$name} {\n      @content;\n    }\n  }\n  @if $original-prefix-for-opera {\n    @include disable-prefix-for-all();\n    $prefix-for-opera: true;\n    @-o-keyframes #{$name} {\n      @content;\n    }\n  }\n  @if $original-prefix-for-spec {\n    @include disable-prefix-for-all();\n    $prefix-for-spec: true;\n    @keyframes #{$name} {\n      @content;\n    }\n  }\n\n  $prefix-for-webkit:    $original-prefix-for-webkit;\n  $prefix-for-mozilla:   $original-prefix-for-mozilla;\n  $prefix-for-microsoft: $original-prefix-for-microsoft;\n  $prefix-for-opera:     $original-prefix-for-opera;\n  $prefix-for-spec:      $original-prefix-for-spec;\n}\n",
		"@mixin linear-gradient($pos, $G1, $G2: false,\n                       $G3: false, $G4: false,\n                       $G5: false, $G6: false,\n                       $G7: false, $G8: false,\n                       $G9: false, $G10: false,\n                       $deprecated-pos1: left top,\n                       $deprecated-pos2: left bottom,\n                       $fallback: false) {\n  // Detect what type of value exists in $pos\n  $pos-type: type-of(nth($pos, 1));\n  $pos-spec: null;\n  $pos-degree: null;\n\n  // If $pos is missing from mixin, reassign vars and add default position\n  @if ($pos-type == color) or (nth($pos, 1) == \"transparent\")  {\n    $G10: $G9; $G9: $G8; $G8: $G7; $G7: $G6; $G6: $G5;\n     $G5: $G4; $G4: $G3; $G3: $G2; $G2: $G1; $G1: $pos;\n     $pos: null;\n  }\n\n  @if $pos {\n    $positions: _linear-positions-parser($pos);\n    $pos-degree: nth($positions, 1);\n    $pos-spec:   nth($positions, 2);\n  }\n\n  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);\n\n  // Set $G1 as the default fallback color\n  $fallback-color: nth($G1, 1);\n\n  // If $fallback is a color use that color as the fallback color\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n\n  background-color: $fallback-color;\n  background-image: _deprecated-webkit-gradient(linear, $deprecated-pos1, $deprecated-pos2, $full); // Safari <= 5.0\n  background-image: -webkit-linear-gradient($pos-degree $full); // Safari 5.1+, Chrome\n  background-image: unquote(\"linear-gradient(#{$pos-spec}#{$full})\");\n}\n",
		"@mixin perspective($depth: none) {\n  // none | <length>\n  @include prefixer(perspective, $depth, webkit moz spec);\n}\n\n@mixin perspective-origin($value: 50% 50%) {\n  @include prefixer(perspective-origin, $value, webkit moz spec);\n}\n",
		"// Requires Sass 3.1+\n@mixin radial-gradient($G1,        $G2,\n                       $G3: false, $G4: false,\n                       $G5: false, $G6: false,\n                       $G7: false, $G8: false,\n                       $G9: false, $G10: false,\n                       $pos: null,\n                       $shape-size: null,\n                       $deprecated-pos1: center center,\n                       $deprecated-pos2: center center,\n                       $deprecated-radius1: 0,\n                       $deprecated-radius2: 460,\n                       $fallback: false) {\n\n  $data: _radial-arg-parser($G1, $G2, $pos, $shape-size);\n  $G1:  nth($data, 1);\n  $G2:  nth($data, 2);\n  $pos: nth($data, 3);\n  $shape-size: nth($data, 4);\n\n  $full: compact($G1, $G2, $G3, $G4, $G5, $G6, $G7, $G8, $G9, $G10);\n\n  // Strip deprecated cover/contain for spec\n  $shape-size-spec: _shape-size-stripper($shape-size);\n\n  // Set $G1 as the default fallback color\n  $first-color: nth($full, 1);\n  $fallback-color: nth($first-color, 1);\n\n  @if (type-of($fallback) == color) or ($fallback == \"transparent\") {\n    $fallback-color: $fallback;\n  }\n\n  // Add Commas and spaces\n  $shape-size: if($shape-size, '#{$shape-size}, ', null);\n  $pos:        if($pos, '#{$pos}, ', null);\n  $pos-spec:   if($pos, 'at #{$pos}', null);\n  $shape-size-spec: if(($shape-size-spec != ' ') and ($pos == null), '#{$shape-size-spec}, ', '#{$shape-size-spec} ');\n\n  background-color:  $fallback-color;\n  background-image: _deprecated-webkit-gradient(radial, $deprecated-pos1, $deprecated-pos2, $full, $deprecated-radius1, $deprecated-radius2); // Safari <= 5.0 && IOS 4\n  background-image: -webkit-radial-gradient(unquote(#{$pos}#{$shape-size}#{$full}));\n  background-image: unquote(\"radial-gradient(#{$shape-size-spec}#{$pos-spec}#{$full})\");\n}\n",
		"@mixin transform($property: none) {\n//  none | <transform-function>\n  @include prefixer(transform, $property, webkit moz ms o spec);\n}\n\n@mixin transform-origin($axes: 50%) {\n// x-axis - left | center | right  | length | %\n// y-axis - top  | center | bottom | length | %\n// z-axis -                          length\n  @include prefixer(transform-origin, $axes, webkit moz ms o spec);\n}\n\n@mixin transform-style ($style: flat) {\n  @include prefixer(transform-style, $style, webkit moz ms o spec);\n}\n",
		"// Shorthand mixin. Supports multiple parentheses-deliminated values for each variable.\n// Example: @include transition (all, 2.0s, ease-in-out);\n//          @include transition ((opacity, width), (1.0s, 2.0s), ease-in, (0, 2s));\n//          @include transition ($property:(opacity, width), $delay: (1.5s, 2.5s));\n\n@mixin transition ($properties...) {\n  @if length($properties) >= 1 {\n    @include prefixer(transition, $properties, webkit moz spec);\n  }\n\n  @else {\n    $properties: all 0.15s ease-out 0;\n    @include prefixer(transition, $properties, webkit moz spec);\n  }\n}\n\n@mixin transition-property ($properties...) {\n   -webkit-transition-property: transition-property-names($properties, 'webkit');\n      -moz-transition-property: transition-property-names($properties, 'moz');\n           transition-property: transition-property-names($properties, false);\n}\n\n@mixin transition-duration ($times...) {\n  @include prefixer(transition-duration, $times, webkit moz spec);\n}\n\n@mixin transition-timing-function ($motions...) {\n// ease | linear | ease-in | ease-out | ease-in-out | cubic-bezier()\n  @include prefixer(transition-timing-function, $motions, webkit moz spec);\n}\n\n@mixin transition-delay ($times...) {\n  @include prefixer(transition-delay, $times, webkit moz spec);\n}\n",
		"@mixin user-select($arg: none) {\n  @include prefixer(user-select, $arg, webkit moz ms spec);\n}\n",
		"$placeholders: '-webkit-input-placeholder',\n               '-moz-placeholder',\n               '-ms-input-placeholder';\n\n@mixin placeholder {\n  @each $placeholder in $placeholders {\n    @if $placeholder == \"-webkit-input-placeholder\" {\n      &::#{$placeholder} {\n        @content;\n      }\n    }\n    @else if $placeholder == \"-moz-placeholder\" {\n      // FF 18-\n      &:#{$placeholder} {\n        @content;\n      }\n\n      // FF 19+\n      &::#{$placeholder} {\n        @content;\n      }\n    }\n    @else {\n      &:#{$placeholder} {\n        @content;\n      }\n    }\n  }\n}\n",
		"@mixin button ($style: simple, $base-color: #4294f0) {\n\n  @if type-of($style) == color {\n    $base-color: $style;\n    $style: simple;\n  }\n\n  // Grayscale button\n  @if $base-color == grayscale($base-color) {\n    @if $style == simple {\n      @include simple($base-color, $grayscale: true);\n    }\n\n    @else if $style == shiny {\n      @include shiny($base-color, $grayscale: true);\n    }\n\n    @else if $style == pill {\n      @include pill($base-color, $grayscale: true);\n    }\n  }\n\n  // Colored button\n  @else {\n    @if $style == simple {\n      @include simple($base-color);\n    }\n\n    @else if $style == shiny {\n      @include shiny($base-color);\n    }\n\n    @else if $style == pill {\n      @include pill($base-color);\n    }\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n}\n\n\n// Simple Button\n//************************************************************************//\n@mixin simple($base-color, $grayscale: false) {\n  $color:         hsl(0, 0, 100%);\n  $border:        adjust-color($base-color, $saturation:  9%,  $lightness: -14%);\n  $inset-shadow:  adjust-color($base-color, $saturation: -8%,  $lightness:  15%);\n  $stop-gradient: adjust-color($base-color, $saturation:  9%,  $lightness: -11%);\n  $text-shadow:   adjust-color($base-color, $saturation:  15%, $lightness: -18%);\n\n  @if lightness($base-color) > 70% {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border:        grayscale($border);\n    $inset-shadow:  grayscale($inset-shadow);\n    $stop-gradient: grayscale($stop-gradient);\n    $text-shadow:   grayscale($text-shadow);\n  }\n\n  border: 1px solid $border;\n  border-radius: 3px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow;\n  color: $color;\n  display: inline-block;\n  font-size: 11px;\n  font-weight: bold;\n  @include linear-gradient ($base-color, $stop-gradient);\n  padding: 7px 18px;\n  text-decoration: none;\n  text-shadow: 0 1px 0 $text-shadow;\n  background-clip: padding-box;\n\n  &:hover:not(:disabled) {\n    $base-color-hover:    adjust-color($base-color, $saturation: -4%, $lightness: -5%);\n    $inset-shadow-hover:  adjust-color($base-color, $saturation: -7%, $lightness:  5%);\n    $stop-gradient-hover: adjust-color($base-color, $saturation:  8%, $lightness: -14%);\n\n    @if $grayscale == true {\n      $base-color-hover:    grayscale($base-color-hover);\n      $inset-shadow-hover:  grayscale($inset-shadow-hover);\n      $stop-gradient-hover: grayscale($stop-gradient-hover);\n    }\n\n    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;\n    cursor: pointer;\n    @include linear-gradient ($base-color-hover, $stop-gradient-hover);\n  }\n\n  &:active:not(:disabled) {\n    $border-active:       adjust-color($base-color, $saturation: 9%, $lightness: -14%);\n    $inset-shadow-active: adjust-color($base-color, $saturation: 7%, $lightness: -17%);\n\n    @if $grayscale == true {\n      $border-active:       grayscale($border-active);\n      $inset-shadow-active: grayscale($inset-shadow-active);\n    }\n\n    border: 1px solid $border-active;\n    box-shadow: inset 0 0 8px 4px $inset-shadow-active, inset 0 0 8px 4px $inset-shadow-active, 0 1px 1px 0 #eee;\n  }\n}\n\n\n// Shiny Button\n//************************************************************************//\n@mixin shiny($base-color, $grayscale: false) {\n  $color:         hsl(0, 0, 100%);\n  $border:        adjust-color($base-color, $red: -117, $green: -111, $blue: -81);\n  $border-bottom: adjust-color($base-color, $red: -126, $green: -127, $blue: -122);\n  $fourth-stop:   adjust-color($base-color, $red: -79,  $green: -70,  $blue: -46);\n  $inset-shadow:  adjust-color($base-color, $red:  37,  $green:  29,  $blue:  12);\n  $second-stop:   adjust-color($base-color, $red: -56,  $green: -50,  $blue: -33);\n  $text-shadow:   adjust-color($base-color, $red: -140, $green: -141, $blue: -114);\n  $third-stop:    adjust-color($base-color, $red: -86,  $green: -75,  $blue: -48);\n\n  @if lightness($base-color) > 70% {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border:        grayscale($border);\n    $border-bottom: grayscale($border-bottom);\n    $fourth-stop:   grayscale($fourth-stop);\n    $inset-shadow:  grayscale($inset-shadow);\n    $second-stop:   grayscale($second-stop);\n    $text-shadow:   grayscale($text-shadow);\n    $third-stop:    grayscale($third-stop);\n  }\n\n  border: 1px solid $border;\n  border-bottom: 1px solid $border-bottom;\n  border-radius: 5px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow;\n  color: $color;\n  display: inline-block;\n  font-size: 14px;\n  font-weight: bold;\n  @include linear-gradient(top, $base-color 0%, $second-stop 50%, $third-stop 50%, $fourth-stop 100%);\n  padding: 8px 20px;\n  text-align: center;\n  text-decoration: none;\n  text-shadow: 0 -1px 1px $text-shadow;\n\n  &:hover:not(:disabled) {\n    $first-stop-hover:  adjust-color($base-color, $red: -13, $green: -15, $blue: -18);\n    $second-stop-hover: adjust-color($base-color, $red: -66, $green: -62, $blue: -51);\n    $third-stop-hover:  adjust-color($base-color, $red: -93, $green: -85, $blue: -66);\n    $fourth-stop-hover: adjust-color($base-color, $red: -86, $green: -80, $blue: -63);\n\n    @if $grayscale == true {\n      $first-stop-hover:  grayscale($first-stop-hover);\n      $second-stop-hover: grayscale($second-stop-hover);\n      $third-stop-hover:  grayscale($third-stop-hover);\n      $fourth-stop-hover: grayscale($fourth-stop-hover);\n    }\n\n    cursor: pointer;\n    @include linear-gradient(top, $first-stop-hover  0%,\n                                  $second-stop-hover 50%,\n                                  $third-stop-hover  50%,\n                                  $fourth-stop-hover 100%);\n  }\n\n  &:active:not(:disabled) {\n    $inset-shadow-active: adjust-color($base-color, $red: -111, $green: -116, $blue: -122);\n\n    @if $grayscale == true {\n      $inset-shadow-active: grayscale($inset-shadow-active);\n    }\n\n    box-shadow: inset 0 0 20px 0 $inset-shadow-active, 0 1px 0 #fff;\n  }\n}\n\n\n// Pill Button\n//************************************************************************//\n@mixin pill($base-color, $grayscale: false) {\n  $color:         hsl(0, 0, 100%);\n  $border-bottom: adjust-color($base-color, $hue:  8, $saturation: -11%, $lightness: -26%);\n  $border-sides:  adjust-color($base-color, $hue:  4, $saturation: -21%, $lightness: -21%);\n  $border-top:    adjust-color($base-color, $hue: -1, $saturation: -30%, $lightness: -15%);\n  $inset-shadow:  adjust-color($base-color, $hue: -1, $saturation: -1%,  $lightness:  7%);\n  $stop-gradient: adjust-color($base-color, $hue:  8, $saturation:  14%, $lightness: -10%);\n  $text-shadow:   adjust-color($base-color, $hue:  5, $saturation: -19%, $lightness: -15%);\n\n  @if lightness($base-color) > 70% {\n    $color:       hsl(0, 0, 20%);\n    $text-shadow: adjust-color($base-color, $saturation: 10%, $lightness: 4%);\n  }\n\n  @if $grayscale == true {\n    $border-bottom: grayscale($border-bottom);\n    $border-sides:  grayscale($border-sides);\n    $border-top:    grayscale($border-top);\n    $inset-shadow:  grayscale($inset-shadow);\n    $stop-gradient: grayscale($stop-gradient);\n    $text-shadow:   grayscale($text-shadow);\n  }\n\n  border: 1px solid $border-top;\n  border-color: $border-top $border-sides $border-bottom;\n  border-radius: 16px;\n  box-shadow: inset 0 1px 0 0 $inset-shadow, 0 1px 2px 0 #b3b3b3;\n  color: $color;\n  display: inline-block;\n  font-size: 11px;\n  font-weight: normal;\n  line-height: 1;\n  @include linear-gradient ($base-color, $stop-gradient);\n  padding: 5px 16px;\n  text-align: center;\n  text-decoration: none;\n  text-shadow: 0 -1px 1px $text-shadow;\n  background-clip: padding-box;\n\n  &:hover:not(:disabled) {\n    $base-color-hover:    adjust-color($base-color,                                $lightness: -4.5%);\n    $border-bottom:       adjust-color($base-color, $hue:  8, $saturation:  13.5%, $lightness: -32%);\n    $border-sides:        adjust-color($base-color, $hue:  4, $saturation: -2%,    $lightness: -27%);\n    $border-top:          adjust-color($base-color, $hue: -1, $saturation: -17%,   $lightness: -21%);\n    $inset-shadow-hover:  adjust-color($base-color,           $saturation: -1%,    $lightness:  3%);\n    $stop-gradient-hover: adjust-color($base-color, $hue:  8, $saturation: -4%,    $lightness: -15.5%);\n    $text-shadow-hover:   adjust-color($base-color, $hue:  5, $saturation: -5%,    $lightness: -22%);\n\n    @if $grayscale == true {\n      $base-color-hover:    grayscale($base-color-hover);\n      $border-bottom:       grayscale($border-bottom);\n      $border-sides:        grayscale($border-sides);\n      $border-top:          grayscale($border-top);\n      $inset-shadow-hover:  grayscale($inset-shadow-hover);\n      $stop-gradient-hover: grayscale($stop-gradient-hover);\n      $text-shadow-hover:   grayscale($text-shadow-hover);\n    }\n\n    border: 1px solid $border-top;\n    border-color: $border-top $border-sides $border-bottom;\n    box-shadow: inset 0 1px 0 0 $inset-shadow-hover;\n    cursor: pointer;\n    @include linear-gradient ($base-color-hover, $stop-gradient-hover);\n    text-shadow: 0 -1px 1px $text-shadow-hover;\n    background-clip: padding-box;\n  }\n\n  &:active:not(:disabled) {\n    $active-color:         adjust-color($base-color, $hue: 4,  $saturation: -12%,  $lightness: -10%);\n    $border-active:        adjust-color($base-color, $hue: 6,  $saturation: -2.5%, $lightness: -30%);\n    $border-bottom-active: adjust-color($base-color, $hue: 11, $saturation:  6%,   $lightness: -31%);\n    $inset-shadow-active:  adjust-color($base-color, $hue: 9,  $saturation:  2%,   $lightness: -21.5%);\n    $text-shadow-active:   adjust-color($base-color, $hue: 5,  $saturation: -12%,  $lightness: -21.5%);\n\n    @if $grayscale == true {\n      $active-color:         grayscale($active-color);\n      $border-active:        grayscale($border-active);\n      $border-bottom-active: grayscale($border-bottom-active);\n      $inset-shadow-active:  grayscale($inset-shadow-active);\n      $text-shadow-active:   grayscale($text-shadow-active);\n    }\n\n    background: $active-color;\n    border: 1px solid $border-active;\n    border-bottom: 1px solid $border-bottom-active;\n    box-shadow: inset 0 0 6px 3px $inset-shadow-active, 0 1px 0 0 #fff;\n    text-shadow: 0 -1px 1px $text-shadow-active;\n  }\n}\n",
		"// Micro clearfix provides an easy way to contain floats without adding additional markup\n//\n// Example usage:\n//\n//    // Contain all floats within .wrapper\n//    .wrapper {\n//      @include clearfix;\n//      .content,\n//      .sidebar {\n//        float : left;\n//      }\n//    }\n\n@mixin clearfix {\n  *zoom: 1;\n\n  &:before,\n  &:after {\n    content: \" \";\n    display: table;\n  }\n\n  &:after {\n    clear: both;\n  }\n}\n\n// Acknowledgements\n// Micro clearfix: [Nicolas Gallagher](http://nicolasgallagher.com/micro-clearfix-hack/)\n",
		"$georgia: Georgia, Cambria, \"Times New Roman\", Times, serif;\n$helvetica: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n$lucida-grande: \"Lucida Grande\", Tahoma, Verdana, Arial, sans-serif;\n$monospace: \"Bitstream Vera Sans Mono\", Consolas, Courier, monospace;\n$verdana: Verdana, Geneva, sans-serif;\n",
		"@mixin hide-text {\n  color:            transparent;\n  font:             0/0 a;\n  text-shadow:      none;\n}\n",
		"//************************************************************************//\n// Generate a variable ($all-text-inputs) with a list of all html5\n// input types that have a text-based input, excluding textarea.\n// http://diveintohtml5.org/forms.html\n//************************************************************************//\n$inputs-list: 'input[type=\"email\"]',\n              'input[type=\"number\"]',\n              'input[type=\"password\"]',\n              'input[type=\"search\"]',\n              'input[type=\"tel\"]',\n              'input[type=\"text\"]',\n              'input[type=\"url\"]',\n\n              // Webkit & Gecko may change the display of these in the future\n              'input[type=\"color\"]',\n              'input[type=\"date\"]',\n              'input[type=\"datetime\"]',\n              'input[type=\"datetime-local\"]',\n              'input[type=\"month\"]',\n              'input[type=\"time\"]',\n              'input[type=\"week\"]';\n\n$unquoted-inputs-list: ();\n@each $input-type in $inputs-list {\n  $unquoted-inputs-list: append($unquoted-inputs-list, unquote($input-type), comma);\n}\n\n$all-text-inputs: $unquoted-inputs-list;\n\n\n// Hover Pseudo-class\n//************************************************************************//\n$all-text-inputs-hover: ();\n@each $input-type in $unquoted-inputs-list {\n      $input-type-hover: $input-type + \":hover\";\n      $all-text-inputs-hover: append($all-text-inputs-hover, $input-type-hover, comma);\n}\n\n// Focus Pseudo-class\n//************************************************************************//\n$all-text-inputs-focus: ();\n@each $input-type in $unquoted-inputs-list {\n      $input-type-focus: $input-type + \":focus\";\n      $all-text-inputs-focus: append($all-text-inputs-focus, $input-type-focus, comma);\n}\n\n// You must use interpolation on the variable:\n// #{$all-text-inputs}\n// #{$all-text-inputs-hover}\n// #{$all-text-inputs-focus}\n\n// Example\n//************************************************************************//\n//   #{$all-text-inputs}, textarea {\n//     border: 1px solid red;\n//   }\n",
		"@mixin position ($position: relative, $coordinates: 0 0 0 0) {\n\n  @if type-of($position) == list {\n    $coordinates: $position;\n    $position: relative;\n  }\n\n  $top: nth($coordinates, 1);\n  $right: nth($coordinates, 2);\n  $bottom: nth($coordinates, 3);\n  $left: nth($coordinates, 4);\n\n  position: $position;\n\n  @if $top == auto {\n    top: $top;\n  }\n  @else if not(unitless($top)) {\n    top: $top;\n  }\n\n  @if $right == auto {\n    right: $right;\n  }\n  @else if not(unitless($right)) {\n    right: $right;\n  }\n\n  @if $bottom == auto {\n    bottom: $bottom;\n  }\n  @else if not(unitless($bottom)) {\n    bottom: $bottom;\n  }\n\n  @if $left == auto {\n    left: $left;\n  }\n  @else if not(unitless($left)) {\n    left: $left;\n  }\n}\n",
		"//************************************************************************//\n// Example: @include prefixer(border-radius, $radii, webkit ms spec);\n//************************************************************************//\n$prefix-for-webkit:    true !default;\n$prefix-for-mozilla:   true !default;\n$prefix-for-microsoft: true !default;\n$prefix-for-opera:     true !default;\n$prefix-for-spec:      true !default; // required for keyframe mixin\n\n@mixin prefixer ($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    }\n    @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    }\n    @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    }\n    @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    }\n    @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    }\n    @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false;\n  $prefix-for-mozilla:   false;\n  $prefix-for-microsoft: false;\n  $prefix-for-opera:     false;\n  $prefix-for-spec:      false;\n}\n",
		"@mixin retina-image($filename, $background-size, $extension: png, $retina-filename: null, $asset-pipeline: false) {\n  @if $asset-pipeline {\n    background-image: image-url(\"#{$filename}.#{$extension}\");\n  }\n  @else {\n    background-image: url(\"#{$filename}.#{$extension}\");\n  }\n\n  @include hidpi {\n\n    @if $asset-pipeline {\n      @if $retina-filename {\n        background-image: image-url(\"#{$retina-filename}.#{$extension}\");\n      }\n      @else {\n        background-image: image-url(\"#{$filename}@2x.#{$extension}\");\n      }\n    }\n\n    @else {\n      @if $retina-filename {\n        background-image: url(\"#{$retina-filename}.#{$extension}\");\n      }\n      @else {\n        background-image: url(\"#{$filename}@2x.#{$extension}\");\n      }\n    }\n\n    background-size: $background-size;\n\n  }\n}\n",
		"@mixin size($size) {\n  @if length($size) == 1 {\n    @if $size == auto {\n      width:  $size;\n      height: $size;\n    }\n\n    @else if unitless($size) {\n      width:  $size + px;\n      height: $size + px;\n    }\n\n    @else if not(unitless($size)) {\n      width:  $size;\n      height: $size;\n    }\n  }\n\n  // Width x Height\n  @if length($size) == 2 {\n    $width:  nth($size, 1);\n    $height: nth($size, 2);\n\n    @if $width == auto {\n      width: $width;\n    }\n    @else if not(unitless($width)) {\n      width: $width;\n    }\n    @else if unitless($width) {\n      width: $width + px;\n    }\n\n    @if $height == auto {\n      height: $height;\n    }\n    @else if not(unitless($height)) {\n      height: $height;\n    }\n    @else if unitless($height) {\n      height: $height + px;\n    }\n  }\n}\n",
		"// CSS cubic-bezier timing functions. Timing functions courtesy of jquery.easie (github.com/jaukia/easie)\n// Timing functions are the same as demo'ed here: http://jqueryui.com/demos/effect/easing.html\n\n// EASE IN\n$ease-in-quad:      cubic-bezier(0.550,  0.085, 0.680, 0.530);\n$ease-in-cubic:     cubic-bezier(0.550,  0.055, 0.675, 0.190);\n$ease-in-quart:     cubic-bezier(0.895,  0.030, 0.685, 0.220);\n$ease-in-quint:     cubic-bezier(0.755,  0.050, 0.855, 0.060);\n$ease-in-sine:      cubic-bezier(0.470,  0.000, 0.745, 0.715);\n$ease-in-expo:      cubic-bezier(0.950,  0.050, 0.795, 0.035);\n$ease-in-circ:      cubic-bezier(0.600,  0.040, 0.980, 0.335);\n$ease-in-back:      cubic-bezier(0.600, -0.280, 0.735, 0.045);\n\n// EASE OUT\n$ease-out-quad:     cubic-bezier(0.250,  0.460, 0.450, 0.940);\n$ease-out-cubic:    cubic-bezier(0.215,  0.610, 0.355, 1.000);\n$ease-out-quart:    cubic-bezier(0.165,  0.840, 0.440, 1.000);\n$ease-out-quint:    cubic-bezier(0.230,  1.000, 0.320, 1.000);\n$ease-out-sine:     cubic-bezier(0.390,  0.575, 0.565, 1.000);\n$ease-out-expo:     cubic-bezier(0.190,  1.000, 0.220, 1.000);\n$ease-out-circ:     cubic-bezier(0.075,  0.820, 0.165, 1.000);\n$ease-out-back:     cubic-bezier(0.175,  0.885, 0.320, 1.275);\n\n// EASE IN OUT\n$ease-in-out-quad:  cubic-bezier(0.455,  0.030, 0.515, 0.955);\n$ease-in-out-cubic: cubic-bezier(0.645,  0.045, 0.355, 1.000);\n$ease-in-out-quart: cubic-bezier(0.770,  0.000, 0.175, 1.000);\n$ease-in-out-quint: cubic-bezier(0.860,  0.000, 0.070, 1.000);\n$ease-in-out-sine:  cubic-bezier(0.445,  0.050, 0.550, 0.950);\n$ease-in-out-expo:  cubic-bezier(1.000,  0.000, 0.000, 1.000);\n$ease-in-out-circ:  cubic-bezier(0.785,  0.135, 0.150, 0.860);\n$ease-in-out-back:  cubic-bezier(0.680, -0.550, 0.265, 1.550);\n",
		"@mixin triangle ($size, $color, $direction) {\n  height: 0;\n  width: 0;\n\n  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {\n    border-color: transparent;\n    border-style: solid;\n    border-width: $size / 2;\n\n    @if $direction == up {\n      border-bottom-color: $color;\n\n    } @else if $direction == right {\n      border-left-color:   $color;\n\n    } @else if $direction == down {\n      border-top-color:    $color;\n\n    } @else if $direction == left {\n      border-right-color:  $color;\n    }\n  }\n\n  @else if ($direction == up-right) or ($direction == up-left) {\n    border-top: $size solid $color;\n\n    @if $direction == up-right {\n      border-left:  $size solid transparent;\n\n    } @else if $direction == up-left {\n      border-right: $size solid transparent;\n    }\n  }\n\n  @else if ($direction == down-right) or ($direction == down-left) {\n    border-bottom: $size solid $color;\n\n    @if $direction == down-right {\n      border-left:  $size solid transparent;\n\n    } @else if $direction == down-left {\n      border-right: $size solid transparent;\n    }\n  }\n}\n",
		"//************************************************************************//\n// These mixins/functions are deprecated\n// They will be removed in the next MAJOR version release\n//************************************************************************//\n@mixin box-shadow ($shadows...) {\n  @include prefixer(box-shadow, $shadows, spec);\n  @warn \"box-shadow is deprecated and will be removed in the next major version release\";\n}\n\n@mixin background-size ($lengths...) {\n  @include prefixer(background-size, $lengths, spec);\n  @warn \"background-size is deprecated and will be removed in the next major version release\";\n}\n",
		"// Bourbon Neat 1.6.0.pre\n// MIT Licensed\n// Copyright (c) 2012-2013 thoughtbot, inc.\n\n// Helpers\n@import \"neat-helpers\";\n\n// Grid\n@import \"grid/private\";\n@import \"grid/reset\";\n@import \"grid/grid\";\n@import \"grid/omega\";\n@import \"grid/outer-container\";\n@import \"grid/span-columns\";\n@import \"grid/row\";\n@import \"grid/shift\";\n@import \"grid/pad\";\n@import \"grid/fill-parent\";\n@import \"grid/media\";\n@import \"grid/to-deprecate\";\n@import \"grid/visual-grid\";\n",
		"// Functions\n@import \"functions/private\";\n@import \"functions/new-breakpoint\";\n\n// Settings\n@import \"settings/grid\";\n@import \"settings/visual-grid\";\n",
		"// Checks if a number is even\n@function is-even($int) {\n  @if $int%2 == 0   {\n    @return true;\n  }\n\n  @return false;\n}\n\n// Checks if an element belongs to a list\n@function belongs-to($tested-item, $list) {\n  @each $item in $list {\n    @if $item == $tested-item {\n      @return true;\n    }\n  }\n\n  @return false;\n}\n\n// Contains display value\n@function contains-display-value($query) {\n  @if belongs-to(table, $query) or belongs-to(block, $query) or belongs-to(inline-block, $query) or belongs-to(inline, $query) {\n    @return true;\n  }\n\n  @return false;\n}\n\n// Parses the first argument of span-columns()\n@function container-span($span: $span) {\n  @if length($span) == 3 {\n    $container-columns: nth($span, 3);\n    @return $container-columns;\n  }\n\n  @else if length($span) == 2 {\n    $container-columns: nth($span, 2);\n    @return $container-columns;\n  }\n\n  @else {\n    @return $grid-columns;\n  }\n}\n\n@function container-shift($shift: $shift) {\n  $parent-columns: $grid-columns !global !default;\n\n  @if length($shift) == 3 {\n    $container-columns: nth($shift, 3);\n    @return $container-columns;\n  }\n\n  @else if length($shift) == 2 {\n    $container-columns: nth($shift, 2);\n    @return $container-columns;\n  }\n\n  @else {\n    @return $parent-columns;\n  }\n}\n\n// Generates a striped background\n@function gradient-stops($grid-columns, $color: $visual-grid-color) {\n  $transparent: rgba(0,0,0,0);\n\n  $column-width: flex-grid(1, $grid-columns);\n  $gutter-width: flex-gutter($grid-columns);\n  $column-offset: $column-width;\n\n  $values: ($transparent 0, $color 0);\n\n  @for $i from 1 to $grid-columns*2 {\n    @if is-even($i) {\n      $values: append($values, $transparent $column-offset, comma);\n      $values: append($values, $color $column-offset, comma);\n      $column-offset: $column-offset + $column-width;\n    }\n\n    @else {\n      $values: append($values, $color $column-offset, comma);\n      $values: append($values, $transparent $column-offset, comma);\n      $column-offset: $column-offset + $gutter-width;\n    }\n  }\n\n  @return $values;\n}\n\n// Layout direction\n@function get-direction($layout, $default) {\n  $direction: nil;\n  \n  @if $layout == LTR or $layout == RTL {\n    $direction: direction-from-layout($layout);\n  } @else {\n    $direction: direction-from-layout($default);\n  }\n\n  @return $direction;\n}\n\n@function direction-from-layout($layout) {\n  $direction: nil;\n\n  @if $layout == LTR {\n    $direction: right;\n  } @else {\n    $direction: left;\n  }\n\n  @return $direction;\n}\n\n@function get-opposite-direction($direction) {\n  $opposite-direction: left;\n\n  @if $direction == left {\n    $opposite-direction: right;\n  }\n\n  @return $opposite-direction;\n}\n",
		"@function new-breakpoint($query:$feature $value $columns, $total-columns: $grid-columns) {\n\n  @if length($query) == 1 {\n    $query: $default-feature nth($query, 1) $total-columns;\n  }\n\n  @else if length($query) % 2 == 0 {\n    $query: append($query, $total-columns);\n  }\n\n  @if not belongs-to($query, $visual-grid-breakpoints) {\n    $visual-grid-breakpoints: append($visual-grid-breakpoints, $query, comma) !global;\n  }\n\n  @return $query;\n}\n",
		"$column: golden-ratio(1em, 3) !default; // Column width\n$gutter: golden-ratio(1em, 1) !default; // Gutter between each two columns\n$grid-columns: 12 !default; // Total number of columns in the grid\n$max-width: em(1088) !default; // Max-width of the outer container\n$border-box-sizing: true !default; // Makes all elements have a border-box layout\n$default-feature: min-width; // Default @media feature for the breakpoint() mixin\n$default-layout-direction: LTR !default;\n",
		"$visual-grid: false !default; // Display the base grid\n$visual-grid-color: #EEE !default;\n$visual-grid-index: back !default; // Show grid behind content (back) or overlay it over the content (front)\n$visual-grid-opacity: 0.4 !default;\n$visual-grid-breakpoints: () !default;\n",
		"$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: nil !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  $display-table: false;\n\n  @if $container-is-display-table == true {\n    $display-table: true;\n  } @else if $display == table {\n    $display-table: true;\n  }\n\n  @return $display-table;\n}\n",
		"@mixin reset-display {\n  $container-display-table: false !global;\n}\n\n@mixin reset-layout-direction {\n  $layout-direction: $default-layout-direction !global;\n}\n\n@mixin reset-all {\n  @include reset-display;\n  @include reset-layout-direction;\n}\n",
		"@if $border-box-sizing == true {\n  * {\n    @include box-sizing(border-box);\n  }\n}\n",
		"// Remove last element gutter\n@mixin omega($query: block, $direction: default) {\n  $table: if(belongs-to(table, $query), true, false);\n  $auto: if(belongs-to(auto, $query), true, false);\n\n  @if $direction != default {\n    @warn \"The omega mixin will no longer take a $direction argument. To change the layout direction, use row($direction) or set $default-layout-direction instead.\"\n  } @else {\n    $direction: get-direction($layout-direction, $default-layout-direction);\n  }\n\n  @if $table {\n    @warn \"The omega mixin no longer removes padding in table layouts.\"\n  }\n\n  @if length($query) == 1 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else if contains-display-value($query) and $table == false {\n      margin-#{$direction}: 0;\n    }\n\n    @else {\n      @include nth-child($query, $direction);\n    }\n  }\n\n  @else if length($query) == 2 {\n    @if $auto {\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n\n    @else {\n      @include nth-child(nth($query, 1), $direction);\n    }\n  }\n\n  @else {\n    @warn \"Too many arguments passed to the omega() mixin.\"\n  }\n}\n\n@mixin nth-child($query, $direction) {\n  $opposite-direction: get-opposite-direction($direction);\n\n  &:nth-child(#{$query}) {\n    margin-#{$direction}: 0;\n  }\n\n  @if type-of($query) == number {\n    &:nth-child(#{$query}+1) {\n      clear: $opposite-direction;\n    }\n  }\n}\n",
		"@mixin outer-container {\n  @include clearfix;\n  max-width: $max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n",
		"@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  // Set nesting context (used by shift())\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @warn \"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\"\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n",
		"@mixin row($display: block, $direction: $default-layout-direction) {\n  @include clearfix;\n  $layout-direction: $direction !global;\n\n  @if $display == table {\n    display: table;\n    @include fill-parent;\n    table-layout: fixed;\n    $container-display-table: true !global;\n  }\n\n  @else {\n    display: block;\n    $container-display-table: false !global;\n  }\n}\n\n",
		"@mixin shift($n-columns: 1) {\n  @include shift-in-context($n-columns);\n}\n\n@mixin shift-in-context($shift: $columns of $container-columns) {\n  $n-columns: nth($shift, 1);\n  $parent-columns: container-shift($shift) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);\n\n  // Reset nesting context\n  $parent-columns: $grid-columns !global;\n}\n",
		"@mixin pad($padding: flex-gutter()) {\n  $padding-list: null;\n  @each $value in $padding {\n    $value: if($value == 'default', flex-gutter(), $value);\n    $padding-list: join($padding-list, $value);\n  }\n  padding: $padding-list;\n}\n",
		"@mixin fill-parent() {\n  width: 100%;\n\n  @if $border-box-sizing == false {\n    @include box-sizing(border-box);\n  }\n}\n",
		"@mixin media($query:$feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n\n  @else {\n    $loopTo: length($query);\n    $mediaQuery: 'screen and ';\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if length($query) % 2 != 0 {\n      $grid-columns: nth($query, $loopTo) !global;\n      $loopTo: $loopTo - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loopTo {\n      $mediaQuery: $mediaQuery + '(' + nth($query, $i) + ': ' + nth($query, $i + 1) + ') ';\n\n      @if ($i + 1) != $loopTo {\n        $mediaQuery: $mediaQuery + 'and ';\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$mediaQuery} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n",
		"@mixin breakpoint($query:$feature $value $columns, $total-columns: $grid-columns) {\n  @warn \"The breakpoint() mixin was renamed to media() in Neat 1.0. Please update your project with the new syntax before the next version bump.\";\n\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns;\n      @content;\n      $grid-columns: $default-grid-columns;\n    }\n  }\n\n  @else if length($query) == 2 {\n    @media screen and (nth($query, 1): nth($query, 2)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns;\n      @content;\n      $grid-columns: $default-grid-columns;\n    }\n  }\n\n  @else if length($query) == 3 {\n    @media screen and (nth($query, 1): nth($query, 2)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: nth($query, 3);\n      @content;\n      $grid-columns: $default-grid-columns;\n    }\n  }\n\n  @else if length($query) == 4 {\n    @media screen and (nth($query, 1): nth($query, 2)) and (nth($query, 3): nth($query, 4)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns;\n      @content;\n      $grid-columns: $default-grid-columns;\n    }\n  }\n\n  @else if length($query) == 5 {\n    @media screen and (nth($query, 1): nth($query, 2)) and (nth($query, 3): nth($query, 4)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: nth($query, 5);\n      @content;\n      $grid-columns: $default-grid-columns;\n    }\n  }\n\n  @else {\n    @warn \"Wrong number of arguments for breakpoint(). Read the documentation for more details.\";\n  }\n}\n\n@mixin nth-omega($nth, $display: block, $direction: default) {\n  @warn \"The nth-omega() mixin is deprecated. Please use omega() instead.\";\n  @include omega($nth $display, $direction);\n}\n",
		"@mixin grid-column-gradient($values...) {\n  background-image: deprecated-webkit-gradient(linear, left top, left bottom, $values);\n  background-image:  -webkit-linear-gradient(left, $values);\n  background-image:     -moz-linear-gradient(left, $values);\n  background-image:      -ms-linear-gradient(left, $values);\n  background-image:       -o-linear-gradient(left, $values);\n  background-image: unquote(\"linear-gradient(left, #{$values})\");\n}\n\n@if $visual-grid == true or $visual-grid == yes {\n  body:before {\n    content: '';\n    display: inline-block;\n    @include grid-column-gradient(gradient-stops($grid-columns));\n    height: 100%;\n    left: 0;\n    margin: 0 auto;\n    max-width: $max-width;\n    opacity: $visual-grid-opacity;\n    position: fixed;\n    right: 0;\n    width: 100%;\n    pointer-events: none;\n\n    @if $visual-grid-index == back {\n      z-index: -1;\n    }\n\n    @else if $visual-grid-index == front {\n      z-index: 9999;\n    }\n\n    @each $breakpoint in $visual-grid-breakpoints {\n      @if $breakpoint != nil {\n        @include media($breakpoint) {\n          @include grid-column-gradient(gradient-stops($grid-columns));\n        }\n      }\n    }\n  }\n}\n",
		"$link: #4d548d;\n$link_hover: #517478;\n$link_visited: #82638d;\n$link_active: #8d4d5a;\n\n$date: #46424b;\n$border_color: #798188;\n",
		".container {\n  @include fill-parent; }\n.wrap {\n  @include outer-container; }\n",
		"@import url('//fonts.googleapis.com/css?family=Playfair+Display:700,900italic');\n\nbody {\n  font: normal 300 14px/150% 'Lato', 'helvetica neue', 'Helvetica Neue Light', sans-serif; }\n\n@each $header, $size in (h1: 24px, h2: 20px, h3: 18px, h4: 16px, h5: 15px, h6: 14px) {\n  #{$header} {\n    font-family: 'Playfair Display','Georgia', sans-serif;\n    font-size: $size;\n    font-weight: bold;\n    line-height: $size*1.5; } }\n\nh1 {\n  font-weight: 900;\n  font-style: italic;\n  text-align: center; }\np {\n  text-indent: 15px; }\n\n.playfair {\n  font-family: 'Playfair Display','Georgia', sans-serif; }\n\nblockquote {\n  position: relative;\n  margin-left: 0;\n  margin-bottom: 22px;\n  padding-left: 40px;\n  &:before {\n    content: '\\00ab';\n    font: bold italic 40px/0.5 'Playfair Display', 'Georgia', sans-serif;\n    position: absolute;\n    left: 5px;\n    top: 0; }\n  > p {\n    &:after {\n      content: '\\00bb';\n      font: bold italic 20px/0.5 'Playfair Display', 'Georgia', sans-serif;\n      margin-left: 5px; } } }\n\na,:link {\n  color: $link;\n  text-decoration: none;\n  border-bottom: 1px solid transparentize($link,0.5);\n  &:visited {\n    color: $link_visited;\n    border-color: transparentize($link_visited,0.5);\n    &:hover {\n      color: $link_hover;\n      border-color: transparentize($link_hover,0.5); } }\n  &:hover {\n    text-decoration: none;\n    color: $link_hover;\n    border-color: transparentize($link_hover,0.5); }\n  &:active {\n    color: $link_active;\n    border-color: transparentize($link_active,0.5); }\n  &:focus {\n    outline: 1px dashed transparentize($link,0.25);\n    box-shadow: none; } }\n\nul {\n  list-style: none;\n  margin: 20px 0;\n  padding-left: 10px;\n  li {\n    position: relative;\n    padding-left: 15px;\n    margin-bottom: 10px;\n    &:before {\n      content: '– ';\n      position: absolute;\n      left: 0;\n      top: 0; } } }\n\nhr {\n  height: 1px;\n  border: 0;\n  background: $border_color;\n  &.dashed {\n    border-bottom: 1px dashed $border_color;\n    background: transparent; } }\n\ntime {\n  font-size: 12px;\n  font-style: italic;\n  color: $date; }\n.text-center {\n  text-align: center; }\n",
		".logo {\n  @extend h1;\n  text-align: center;\n  color: #000;\n  display: block;\n  border-bottom: none;\n  &:link {\n    color: #000; }\n  &:visited {\n    color: #000;\n    &:hover {\n      color: #000; } }\n  &:hover {\n    color: #000; } }\n",
		".post_url {\n  font-weight: bold; }\n.toc {\n  text-align: center;\n  li {\n    padding: 0;\n    margin: 4px 0 8px;\n    >a {\n      display: inline-block; }\n    &:before {\n      content: none; } } }\n",
		"#about {\n  h1 {\n    color: #fff;\n    text-shadow: 3px 2px 0 rgba(47, 73, 236, 0.95), -2px 2px 0 rgba(244, 236, 66, 0.95); } }\n.me_glitch {\n  width: 100%;\n  height: auto; }\n",
		".share_links {\n  margin-top: 15px;\n  margin-bottom: 20px;\n  &:before {\n    content: 'Share, please: ';\n    margin-right: 6px; }\n  .share_link {\n    font-style: italic;\n    font-weight: 400;\n    margin-right: 5px;\n    &:last-child {\n      margin-right: 0; } } }\n\n#disqus_thread {\n  text-align: center;\n  min-height: 62px;\n  margin-bottom: 20px;\n  position: relative;\n  .show_comments {\n    font-weight: 400;\n    display: inline-block;\n    position: relative;\n    top: 25px; } }\n",
		".author_section {\n  @include clearfix;\n  margin-bottom: 0.5em;\n  strong {\n    @extend .playfair;\n    font-style: italic; }\n  .ava {\n    float: left;\n    margin-right: 10px; } }\n",
		".footer {\n  padding-top: 20px;\n  border-top: 1px dashed $date; }\n",
		"battery, charge {\n  display: block; }\n\n$battery_height: 10px;\n$battery_width: 25px;\n$battery_color: #333;\nbattery {\n  width: $battery_width;\n  height: $battery_height;\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  background: #fff;\n  border: 1px solid $battery_color;\n  border-radius: 3px;\n  &:before {\n    content: '';\n    width: 2px;\n    height: $battery_height*0.33;\n    position: absolute;\n    left: -3px;\n    top: 50%;\n    margin-top: -(($battery_height*0.33)/2);\n    background: $battery_color; }\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    border: 1px solid #fff;\n    border-radius: 2px; }\n  charge {\n    width: auto;\n    height: $battery_height - 4;\n    margin: 1px;\n    background: green;\n    float: right;\n    border-radius: 2px; } }\n",
		".video_responsive {\n  position: relative;\n  padding-bottom: 56.25% /* 16:9 */;\n  padding-top: 25px;\n  height: 0;\n\n  iframe {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%; } }\n",
		".highlight {\n  background: #FDFFF0;\n  padding: 0 14px;\n  overflow: scroll;\n  .c {\n    color: #999988;\n    font-style: italic /* Comment */; }\n  .err {\n    color: #a61717;\n    background-color: #e3d2d2  /* Error */; }\n  .k {\n    font-weight: bold  /* Keyword */; }\n  .o {\n    font-weight: bold  /* Operator */; }\n  .cm {\n    color: #999988;\n    font-style: italic  /* Comment.Multiline */; }\n  .cp {\n    color: #999999;\n    font-weight: bold  /* Comment.Preproc */; }\n  .c1 {\n    color: #999988;\n    font-style: italic  /* Comment.Single */; }\n  .cs {\n    color: #999999;\n    font-weight: bold;\n    font-style: italic  /* Comment.Special */; }\n  .gd {\n    color: #000000;\n    background-color: #ffdddd  /* Generic.Deleted */;\n    .x {\n      color: #000000;\n      background-color: #ffaaaa  /* Generic.Deleted.Specific */; } }\n  .ge {\n    font-style: italic  /* Generic.Emph */; }\n  .gr {\n    color: #aa0000  /* Generic.Error */; }\n  .gh {\n    color: #999999  /* Generic.Heading */; }\n  .gi {\n    color: #000000;\n    background-color: #ddffdd  /* Generic.Inserted */;\n    .x {\n      color: #000000;\n      background-color: #aaffaa  /* Generic.Inserted.Specific */; } }\n  .go {\n    color: #888888  /* Generic.Output */; }\n  .gp {\n    color: #555555  /* Generic.Prompt */; }\n  .gs {\n    font-weight: bold  /* Generic.Strong */; }\n  .gu {\n    color: #aaaaaa  /* Generic.Subheading */; }\n  .gt {\n    color: #aa0000  /* Generic.Traceback */; }\n  .kc {\n    font-weight: bold  /* Keyword.Constant */; }\n  .kd {\n    font-weight: bold  /* Keyword.Declaration */; }\n  .kp {\n    font-weight: bold  /* Keyword.Pseudo */; }\n  .kr {\n    font-weight: bold  /* Keyword.Reserved */; }\n  .kt {\n    color: #445588;\n    font-weight: bold  /* Keyword.Type */; }\n  .m {\n    color: #009999  /* Literal.Number */; }\n  .s {\n    color: #d14  /* Literal.String */; }\n  .na {\n    color: #008080  /* Name.Attribute */; }\n  .nb {\n    color: #0086B3  /* Name.Builtin */; }\n  .nc {\n    color: #445588;\n    font-weight: bold  /* Name.Class */; }\n  .no {\n    color: #008080  /* Name.Constant */; }\n  .ni {\n    color: #800080  /* Name.Entity */; }\n  .ne {\n    color: #990000;\n    font-weight: bold  /* Name.Exception */; }\n  .nf {\n    color: #990000;\n    font-weight: bold  /* Name.Function */; }\n  .nn {\n    color: #555555  /* Name.Namespace */; }\n  .nt {\n    color: #000080  /* Name.Tag */; }\n  .nv {\n    color: #008080  /* Name.Variable */; }\n  .ow {\n    font-weight: bold  /* Operator.Word */; }\n  .w {\n    color: #bbbbbb  /* Text.Whitespace */; }\n  .mf {\n    color: #009999  /* Literal.Number.Float */; }\n  .mh {\n    color: #009999  /* Literal.Number.Hex */; }\n  .mi {\n    color: #009999  /* Literal.Number.Integer */; }\n  .mo {\n    color: #009999  /* Literal.Number.Oct */; }\n  .sb {\n    color: #d14  /* Literal.String.Backtick */; }\n  .sc {\n    color: #d14  /* Literal.String.Char */; }\n  .sd {\n    color: #d14  /* Literal.String.Doc */; }\n  .s2 {\n    color: #d14  /* Literal.String.Double */; }\n  .se {\n    color: #d14  /* Literal.String.Escape */; }\n  .sh {\n    color: #d14  /* Literal.String.Heredoc */; }\n  .si {\n    color: #d14  /* Literal.String.Interpol */; }\n  .sx {\n    color: #d14  /* Literal.String.Other */; }\n  .sr {\n    color: #009926  /* Literal.String.Regex */; }\n  .s1 {\n    color: #d14  /* Literal.String.Single */; }\n  .ss {\n    color: #990073  /* Literal.String.Symbol */; }\n  .bp {\n    color: #999999  /* Name.Builtin.Pseudo */; }\n  .vc {\n    color: #008080  /* Name.Variable.Class */; }\n  .vg {\n    color: #008080  /* Name.Variable.Global */; }\n  .vi {\n    color: #008080  /* Name.Variable.Instance */; }\n  .il {\n    color: #009999  /* Literal.Number.Integer.Long */; } }\n"
	],
	"names": [],
	"mappings": "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"
}